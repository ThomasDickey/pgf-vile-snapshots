	(E means enhancement, L,M,H are low, medium, high priority)
----------------------

H	The mvrightwind and mvleftwind functions are broken -- visiting lines
	that are too short to be visible when the screen is shifted will
	cause junk on the screen.

E	DOS to-do:
	- globbing (e.g. ":e *.c") does nothing under DOS -- the code in
	expand_wild_args() can probably be used to accomplish this.
	- filter-region -- this would be easier if I had used named pipes
	as the conduit between child and parent, instead of regular pipes,
	'cause then I could just replace the named pipe with a tmp file
	under DOS.	
	- some function keys return 8 bit characters on the PC.  This means
	the input path, through tgetc, has to be 8-bit clean, we need to
	allow 256 bindings instead of the current 128, and we can't use
	0x80 as the definition of the SPEC bit.  All this is easy -- it
	just needs to be done.
	- there used to be a "set screen {25|43|50} command -- what happened
	to it?  should 'set-variable $sres "CGA"' do the same thing?  if not,
	what's it for?

E	should add a "show-vars" command

E	everybody and their sibling wants "map", "map!", and "abb".
	the first step to supporting this is making macro/dotcmd replay be
	properly fully nested, and generalized.  I think, for instance that
	if an @a macro invoked a @b macro, or a ^X-& macro, there'd be
	reentrancy problems.

E	add "set autowrite", ":n file" (what does that do?), "set nu", "set
	noredraw"

E	now that paragraphs, sections, and sentences are all selectable
	with regexps, they (and the tabstop value) are prime candidates for
	moving into a "mode-values" set of values.  A buffer would inherit
	either the global normal-mode values, or the global c-mode values.

E	should the "value'd" modes be variables?  vice-versa?  Probably the
	notion of variables should be unified with the values somehow, possibly
	via a new valueset containing just the variables.  they would not
	be inherited by buffers, but would always be global.  the CSUFFIXES
	value would be a good thing to move there, since it doesn't make sense
	as a per-buffer value.  Or else the variables should be checked for
	matches after the rest of the value sets.

E	:k, to set a mark, won't work as ":ka" or ":kb".  Must use ":k a"

E	patterns as addresses do not work, e.g. ":/str1/,/str2/d".  They're
	hard to parse the way things are set up right now.  We could accumulate
	the whole commandline, and then parse it, the way real vi does, but we'd
	lose the "prompt and display last response" behavior.

E	In vi, the join command is supposed to act either on a region (from
	the command line, as in ":13,15j"), or it should take a simple
	count, from vi mode, as in "3j".  Right now vile _only_ does the
	simple count form of the command.

E	should add an option to support file locking, rather than the
	current ifdef stuff -- but this is only useful if we match the
	GNU locking protocol, which I'm not inclined to do.  And it's not
	clear that in an NFS'ed environment that it's all that easy to
	get that style of locking right anyway.

E	the scrsearch functions could become region based -- as in "search for
	the next occurrence of the region", which would usually be a word.  And
	the ^A/ version could become "a/ (search for teh contents of buffer a),
	if you know what I mean.

E	need a "file newer than buffer" warning.  Should stat the file, and
	store it's mod time, compare to current when going back to that window,
	after performing some shell command, or just before modifying it. 
	e.g., if you're editing a file that is created by a script you're
	testing, then you want to be warned that the file is out of date
	after doing a test run of the script.

E	should implement tagpath, and/or multiple tags files as well.

E	it would be nice if ^X!! reran the last command into [Output]

E	add support for sh or C comments to formatregion() code

E	g should become a region command.  Then it could take ranges, as
	it should, and could also become an operator command.

E	adjust window size of popups based on length of buffer.  currently
	popups get half the window they're splitting, no matter what

E	collapse command execution code to as few places as possible.
	Its currently spread through execute(), operator(),
	docmd(), and usekreg().
	
E	mlreply line should ideally be a one line buffer, so editing
	and history can be done on it.

E	BSD interrupt processing is botched during a read() of the keyboard.
	The read doesn't return -1 as it does under sysV (USG).
	So you can bang on ^C all day and nothing will happen.  It does work
	if you're not in a read(), of course.
	
E	I haven't even come close to testing vile for
	memory-full conditions.  Some malloc() packages give 95%
	warnings -- perhaps something like that should be done for
	safety.

E	marks should perhaps be linked onto lines.  this would make a lot
        of things a lot easier, since a mark would travel with the
        line, instead of having to be moved when the line is
        reallocated etc.  the U line could be treated as a special
        mark.  The "copied" flag needed by undo could be a special
        sort of mark as well.  Implementation of the "tag stack"
	would be aided by this as well.

E	:e and :n should be able to deal with multiple filenames resulting
	from filename globbing.  vi has this problem too.  At least
	vile lets you choose to choose the first such name.  if should show
	you the first name, so you know whether to accept it or not.

E	vi lets you say: "set ai nows ic".  These must be separate commands
	in vile.


E	When a line is too long to fit on the screen, you have to move
	over it to see the rest, and when you get to the edge of the screen,
	it jumps. I would prefer a smooth(er) scroll.

E	File completion would be nice for commands asking for filenames.
	This saves a lot of typing.

L	"I found a problem when using vile with encrypted files.  During a file
	edit if I set the mode to crypt and save the file, I am prompted
	for a encryption key.  When I try to read in this encrypted file in
	another session using "vile -kcryptkey file".  I am prompted for
	the encrypt key and when I type it in, I get the message
	"Encryption String: IOT trap".  "  [ Anyone wanting to work on this,
	I can send you more info -- pgf ]

