	(E means enhancement, L,M,H are low, medium, high priority)
----------------------

E	everybody and their sibling wants "map", "map!", and "abb".
	there is now fledgling support for this, courtesy Otto Lind.
	Still no map! or abb, and nested maps are broken in a couple
	of ways, but it's a start...  oh yes, one other thing -- :map
	currently only supports single key mappings (i.e.  you can map one
	vile key-sequnce to a string, but there is no string to string
	mapping).

	    [ a user writes: vi's map/map!  has problems in treating
	    numbers of ^V in different platforms.  And mail/newsreaders
	    don't like those control characters.  I suggest you consider
	    the bindkey style in tcsh that uses \e as ESC, \r as return
	    etc.  vile is not just a vi emulator anyway. ]

E	add "set autowrite", ":n file" (what does that do?), "set noredraw"

E	now that paragraphs, sections, and sentences are all selectable
	with regexps, they (and the tabstop value) are prime candidates for
	moving into a "mode-values" set of values.  A buffer would inherit
	either the global normal-mode values, or the global c-mode values.

E	:k, to set a mark, won't work as ":ka" or ":kb".  Must use ":k a"

E	patterns as addresses do not work, e.g. ":/str1/,/str2/d".  They're
	hard to parse the way things are set up right now.  We could accumulate
	the whole commandline, and then parse it, the way real vi does, but we'd
	lose the "prompt and display last response" behavior.

E	should add an option to support file locking, rather than the current
	ifdef stuff.  (this is only useful if we match the GNU locking
	protocol.) And it's not clear that in an NFS'ed environment that
	it's all that easy to get that style of locking right anyway.

E	the scrsearch functions could become region based -- as in "search for
	the next occurrence of the region", which would usually be a word.  And
	the ^A/ version could become "a/ (search for the contents of buffer a),
	if you know what I mean.

E	g should become a region command.  Then it could take ranges, as
	it should, and could also become an operator command.

E	adjust window size of popups based on length of buffer.  currently
	popups get half the window they're splitting, no matter what

E	collapse command execution code to as few places as possible.
	Its currently spread through execute(), operator(),
	docmd(), and usekreg().

E	mlreply line should ideally be a one line buffer, so inline editing
	can be done on it.

E	I haven't even come close to testing vile for
	memory-full conditions.  Some malloc() packages give 95%
	warnings -- perhaps something like that should be done for
	safety.

E	marks should perhaps be linked onto lines.  this would make a lot
        of things a lot easier, since a mark would travel with the
        line, instead of having to be moved when the line is
        reallocated etc.  the U line could be treated as a special
        mark.  The "copied" flag needed by undo could be a special
        sort of mark as well.  Implementation of the "tag stack"
	would be aided by this as well.

E	:e and :n should be able to deal with multiple filenames resulting
	from filename globbing.  vi has this problem too.  At least
	vile lets you choose to choose the first such name.  it should show
	you the first name, so you know whether to accept it or not.

E	When a line is too long to fit on the screen, you have to move
	over it to see the rest, and when you get to the edge of the screen,
	it jumps. I would prefer a smooth(er) scroll.

L	vile really ought to use unix-crypt if it is available.

E	in autoindent mode: 0^D and ^^D don't work

E	can't search for a NUL in a buffer.

E	if a file has zero-length, it is treated as not-modified

E	":e" and ":e!" should share the same prompt data, which should be
	editable / history.  They both should default (like vi!) to the
	current buffer.

E	the "ww" command (e.g., 'writeall()') emits multiple messages via
	'mlforce()'; these go by too quickly to follow.
	[ the alternative currently is to require a press-return, which some
	  folks don't like. ]

E	for consistency, 'execute-macro-nn' should be 'execute-macro nn';
	doing this would allow modification to eliminate a fixed number of
	macro-buffers.

E	should ifdef the 'autobuffer' code for users who do not need vi-style
	buffering.

===================================================

    Is it possible to get vile to prompt you if you try to exit without
    viewing all the files that were given on the command line?

    It would be nice if the cmode-style autoindenting would do the
    same thing with () and [] as it does with {}.  This would be
    useful for writing function calls with lots of arguments.
[ hard ]

    In cmode, is it possible to get vile to return to the previous
    indentation on the line after a # directive?


===================================================

    The ed 'transfer' and 'move' commands don't work.
    (to copy and move text around.  e.g., :'a,'bt$.)

===================================================


PCVILE

	- some function keys return 8 bit characters on the PC.  This means
	the input path, through tgetc, has to be 8-bit clean, we need to
	allow 256 bindings instead of the current 128, and we can't use
	0x80 as the definition of the SPEC bit.  All this is easy -- it
	just needs to be done.

===================================================

PCVILE

Firstly - UNISYS 80286, EGA screen, 4DOS command shell & NNANSI.SYS

1) Attempting to shell out to 4dos results in running COMMAND.COM.  Is
   this because COMSPEC is not checked ?

2) Attempting to redirect the output of a 4DOS internal command into a
   buffer works erratically.

	a) :e !dir		- never works
	b) ^X-!dir		- works BUT when followed by;
	   ^X-!set		- I get the dir listing again.


3) During testing I noticed another odd result when running the command;

	:!set

   I notice that the output starts on the status line and will overwrite
   it before continuing onto other lines.  However running

	:!dir

   appears to print out just fine.

4) Points 1) & 3) I have previuosly raised with Peter Ruczynski on his
   version.

[ i don't know if any of these are still true -- this was with 3.25 ]




===================================================
486 PC under Dell Unix (svr4) - make:    unixpc
HP9000/700 under HPUX 8.07    - changes: do not include <Xos.h> in x11.c when
                                         hpux is defined
                                incs:    add -I/usr/include/X11R4
                                libs:    add -L/usr/lib/X11R4
                                make:    hpux
Tektronix XD88/10 under UTekV - changes: removed LIBS definition from svr3 rule
                                         in makefile to make xvile
                                cflags:  add -DSYSV -X28
                                make:    svr3
----------------------------------------------------------------------

Though I use it, I'm still not quite satisfied with the qident stuff.  It
needs to be more flexible.  That is, I'd like to make it user defined.
For example
	find-tag $qidentifier
should be expressable as a character class like
	find-tag &anyof "a-zA-Z_0-9:"
in a macro.  Or even more generally, as a regular expression:
	find-tag &scan "[a-zA-Z_][a-zA-Z_0-9:]\\*"
A leading ^ would root the search at the current cursor position.
Absence of a leading ^ would start at the current cursor position but would
scan ahead until it found a match.  That way I can redefine ^] to pick
up the next word even if the cursor is before the start of the word (thus
better mimicking vi's behavior).

[ This can almost be done with the $match variable, e.g.
	7 store-macro
		search-forward "[a-zA-Z_][a-zA-Z_0-9:]*"
		find-tag $match
	~endm

	bind-key execute-macro-7 ^A-g
 - pgf ]
----------------------------------------------------------------------

Enhancement:  xvile would be nicer with scroll bars.

----------------------------------------------------------------------

In message <9212231610.AA27630@cuba.Cayman.COM> you write:
>
> > The rest (regexp.c) fix problems with
> > \S \w \W \d \D \p \P never matching the first character on a line.
>
>Actually, I could have sworn I put in the check against BOL to prevent some
>infinite loop or other oddness -- but I'll put certainly apply your change
>until proven otherwise...

The only remaining pieces of oddness I've seen are
1) doing ?\w when already on a \w character -- it says Only one occurrence
of pattern.

1a) doing ?\W when already on a \W character -- it says Only one occurrence
of pattern.

2) doing /\s stops at the end of a line and won't go any further (because
the cursor rests on the last character of the line which is before the eol).

[ these are both tricky to fix... i tried, and started introducing problems
elsewhere. -pgf]

----------------------------------------------------------------------
Also, I encountered the following problem: I am editing foo.tex and
call latex using ^X!latex foo.tex. There is an error, so latex waits for
input -> vile sits waiting and nothing helps. I think this should
be interruptable. I will agree with you that the ^X! command was not
intended for this, but still...

But ok, the real problem is that after I kill latex and
vile comes back to life I can no longer filter parts of text using
!fmt. The text just gets deleted.

----------------------------------------------------------------------

I just grabbed a copy of xvi.  I noted some interesting tidbits while
reading the "differences between vi and xvi" document.  Some of these would
be nice in vile.


     As well as the normal named (conjugate) buffers, and the  default
     one  named @, several extra buffers named :, /, ?  and ! contain
     the last command lines entered for each of the command types.  So
     for  instance,  @: will re-execute the last colon command, or you
     can insert it into your buffer, edit it and  then re-execute  it
     (e.g. with dd@@).


     +    In insert and replace modes, ^A has the same meaning  as  ^@
          in  vi,  except  that it works at any time, not just for the
          first character.  Also, typing ^Bx, where x is the name of a
          conjugate  buffer,  inserts the contents of that buffer into
          the input stream at that point.  The buffer named  <  always
          contains the last thing inserted, so that ^B< is the same as
          ^A.


     2.8.  Preserve

     Rather than use vi's UNIX-specific method for  preservation,  xvi
     does  periodic  preservation  of all files currently being edited
     into a temporary file in the same directory.   Xvi  tries  to  do
     this  when you are not typing, so that you won't notice the short
     delay when the temporary file is written  out.   Obviously,  only
     changed  files  are preserved in this way, and the temporary file
     is normally removed once the  real  file  has  been  successfully
     written.   As  an  additional  safety  measure,  when  a  file is
     explicitly saved and  it  appears  not  to  have  been  preserved
     recently,  it  is  normally  preserved first.  This ensures that,
     even if the operating system crashes while the real file is being
     created, there should always be at least one recent copy of it in
     the filesystem.  The :preserve command is available as in  vi  to
     preserve a specific buffer manually.

     The level of safety provided by the preservation facility may  be
     configured   by   changing   the   values  of  the  preserve  and
     preservetime parameters.  The following values are available  for
     preserve:

     unsafe    Never preserve any  buffer  before  an  explicit  save.
               This  can  be useful on old, slow, floppy-only systems,
               but is not generally recommended.

     standard  The default value.  Only preserve a  buffer  before  an
               explicit  save if it appears not to have been preserved
               recently.

     safe      Always preserve buffers before they are written.

     paranoid  As for safe, but the preserve file  is  never  removed,
               even after the file has been successfully written.

     In all cases, all modified buffers  are  preserved  automatically
     after no user events have been received for preservetime seconds,
     if a minimum number of events (currently 60) have  been  received
     since  the  last  automatic  preservation.  This behaviour can be
     more or less disabled by setting  preservetime  to  a  very  high
     value.


------------------------
I wish ^X-!  could execute shell commands async'ly, i.e.  I should not have
to wait/do nothing while waiting for the ouput of compiling.  I should be
able to edit stuff in other buffers or even ^X-^X to edit src codes
while compilation is still going on.

------------
similar to above -- sub-commands run from ^X-! or ":[erw] !cmd" should be
"interactive" to the extent that user's input should be sent to the cmd
at least on a line-by-line basis (i.e. we can't send raw keystrokes -- we
have to do canonical processing.  of course, we should really use pty's, and
reconnect input and capture output.)  some commands like latex prompt for
more input when partway done.

========(VMS-VILE)=============================================================
Unfinished items on vax/vms (dickey@software.org):

	+ the response time seems a bit slow (compared with other applications
	  running on the same machine).  possible problem areas include:

		+ observed that (at least on vms) I am getting highlighting
		  attributes being reset on each line, rather than only when
		  they change.

		+ probably am making too many calls to canonpath and
		  lengthen_path (affects performance on vms).

	+ if the current directory has changed, offer to restore it on exit. 
	  (Note that if the _device_ portion has changed, the original
	  directory should be restored anyway!).

	+ filename-completion works too slowly on vms; may be doing stat calls
	  or something else.  Also, it does not seem to start properly with

	  	":e e?".

	+ add key bindings and other support to make the vt100 keypad work for
	  me (e.g., like EDT).

	+ see if I can decode ".dia" files, if so connect it to finderr.c

	+ catch exception/signals, and restore terminal settings.

	+ make dec-shell names work in file-completion.  These are quasi-unix
	  filenames, which most of the VAX-C runtime routines accept.  If _all_
	  runtime code could use dec-shell names, I wouldn't have done any
	  native vms pathnames (sigh).  As it is, all dec-shell names are
	  automatically converted to vms-pathnames (i.e., by 'getname()').

	+ make write-pipes work (actually, flesh out to use 'npopen' coding
	  scheme, like the MSDOS stuff).

	+ I had a case in which I wanted to read the contents of one file into
	  another; they had the same buffer name; the target buffer got the
	  filename for the source, e.g.,

	  	:e []foo		- read and determined version # ok
		:r [-.temp]foo		- current filename reset to [-.temp]foo
------------------------------------------------------------


it would be nice if vile would fold text...

	This feature appeared in uEmacs version 3.10.23 and you can
use archie/xarchie to file fue.tar.Z (fue - folding-micro-emacs).

[ i believe joseph rajkumar is working on this ]


-----------

I have a couple of bug reports and suggestions for you, concerning vile
3.52 on SunOS.


5) annoying
	When I execute a keyboard macro using ^X-& I cannot repeat this
	using the dot command. Instead, the last command in the macro
	is repeated.
    [ this is because . doesn't do @ macros either...]

------------------------------
I found a bug in vile3.54 with file completion. If I type:
        :r ~/c/headed/aut<TAB>
It correctly expands it to
        ~/c/headed/author
But says [No such file "~/c/headed/author"] while this file definitely
exists.

[ can't reproduce this ]

------------------------------

I also found a hard-to-reproduce-bug where I would type some input very
fast, usually involving ^X-!, :w, etc. after which vile would no longer
accept any input. It is not completely stuck, because it still reacts
to window resizes, but it can not be backgrounded. Neither does it
react to a SIGSEGV. I tried to get it to coredump and have it save the
file and send me a mail.... Sorry I can't be anymore specific.

[ can't reproduce this ]

------------------------------

Can you add the '>' character to the list of comment chars for paragraph
reformatting?  I would live to be able to reformat mail quotes (like shown
above).

[ pgf notes: I did this, as chris suggested, but formatregion should use
  the comments regexp to match a comment delimiter at the beginning of
  line, and should insert the comment delimiter of the _second_ line (so
  that boxed C comments work right)in subsequent reformatted lines,
  including leading but not trailing whitespace.  indentlen should be
  counted _after_ the width of such a comment delimiter.  this would make
  paragraphs that are indented way after the delimiter keep their indent. 
  commented paragraphs should end when exp->mlen for the comment regexp is
  equal to llength(DOT), i.e.  it's the whole line.  (we'll need to take
  the $ off the end of the comment regexp).  ]

--------------------

	(wibni) if i started looking up tags and pressed the tab key it should
	complete the line.
	(tag completion -- good idea -- requires a buffer as in filec.c)

--------------------
	When you use the command line and you do a !<command>
	to execute something in the shell. Would you be able to make it so that 	it can complete filenames there also??
	so i could do the following:
	!ls ~daml/files/rec
[ hard.  probably not worth it. ]

----------------------------------

We are running vile under NeXT and we have
problems to set macros with the meta key.
--------------------------------

I got to compile vile at home over the weekend.  The version of
djgpp (gcc 2.4.2 - sorry, I don't know the djgpp version number)
I have didn't like this bit from estruct.h, lines (561-563):

#if ! LINUX	/* there are probably others that don't want const defined */
# define const
#endif

----------------------------------

enhancement:  reimplement error finder using regexps.

------------------------------
core dump on startup in xterm with too many rows.

------------------------------
	Another enhacement.
	How about a history file.  say I have been using vile and
	quit and come back in later I can use the history file.

--------------------------

In a xterm window the down arrow (which sends ESC-O-B) works for individual
presses.  If you hold down the key then letter Bs get peppered through out
the file.  It appears that the ESC is occasionally being missed so that the
following OB puts a B in the file.

In my case I'm on a workstation running 4.1.3 and xterm using rlogin to
connect to a 690 server (lightly loaded) running 4.1.3 and running vile
on the 690.

I just ran vile locally and didn't see the problem.
-------------------------------

PC Vile --

   1) Open a 50-line DOS box under windows.

   2) Invoke pc vile (dos box stays at 50 lines, as I would expect).

   3) Exit pc vile and the dos box goes to 25 lines. I wish PC vile would
     leave the dos box at 50 lines.

[ is this still true?  i don't see why it's happening -- we restore the
    screen mode... ]
----------------------------------


On the Sun 4, Sun os 4.1.1 vile doesn't seem to work in cmdtool or
shelltool windows (and, of course, vi does). Can you provide any help
on that? Personally, I don't use cmdtool (I prefer xterm) but a lot
of our users do use cmdtool.

I found an ugly workaround. Turning off SCROLLCODE does the job.

[ cannot duplicate this on SunOs 4.1.3 ]

----------------------------------

I found a bug with vile 3.59, compiled on a SparcStation running SunOS
4.1.2. Using an xterm inserting a formfeed character gives some very
strange behaviour. When I type:
        0i^V^L
the visual line under the cursor is deleted, and the cursor moves to
the next line, 3rd row. When I now type a space the ^L appears and
everything goes seemingly back to normal. If I insert the ^L on any but
the 1st row there is no problem. Weird eh! vile 3.55 did not have this
problem.

[ cannot duplicate this on SunOs 4.1.3 ]

-------------------------------------------------------------------------


I found a bug (new with 3.59) on our Pyramid SVR4 (but not Pyramid SVR3,
SunOS 4.1.1, AIX 3.2) where
	xvile tmp &
pops up the xvile window briefly, the window dies, the xterm I started
xvile from says
	[1]  + suspended (tty input)  xvile3.59 tmp
and then after a couple seconds the xterm itself vanishes!  However,
	xvile tmp
works fine, except that the process is in the foreground.
 > The bug on the Pyramid SVR4 machine with xvile & suspending itself,
 > committing suicide, and then blowing away the xterm still exists.
 > For the time being I just remember to run xvile on a different
 > machine.

-----------------------------
apply Alistair's min/max regexp patch

-------------------------------------------------------------------------

	Is there any way to use termcap to define 
all of the window parameters, but still use ANSI escapes for colors?  Elvis
allows me to do this under Linux on the terminal screen and a couple of
systems allow Elvis to change the foreground and background colors under an
xterm.  If I tell Vile to compile using ANSI instead of termcap it works
but it doesn't seem to recognize any of my termcap variables (which means
it doesn't get the right screen size or exits with incorrect colors).

-----------------------------

In vile version 3.61 (SunOS 4.2.3 xterm)

The search pattern:
	/:\>/
does not find :

[ should it? the \> looks for a "word" to "non-word" transition, and ':' is a
"non-word" character ]

---------------------------
would be nice if "file newer" warning could come up on first change to buffer.

---------------------------

	xvile has been dumping core rather frequently today.  Not sure
why, though I did change window managers today.  This is on a Sun4 running
SunOS 4.1.1.  Here's what adb says.  This is the second time I tried adb
on the core file, and both times the problem was in tb_get.
	Eric Krohn

_kill(?)
__DYNAMIC(0x0,0x46000,0x45c20,0xf7fff585,0x1,0x0) + 8
_imdying(0xb,0x3,0xf7ffdc48,0x1,0x1,0xf7fff585) + 174
__sigtramp(?)
_tb_get(0x89e20,0xdfdfdfdf,0x41000,0x1,0xf83e3000,0x1b) + ac
_tb_next(0x89d88,0xdfdfdfdf,0x1,0x8000000,0xf83e3000,0x1) + 20
_x_getc(0x0,0xf7ffe610,0x0,0x0,0xffffffff,0x48400) + 20
_tgetc(0x0,0x1,0xd0,0x0,0x7a2c8,0xffffffff) + ac
_kbd_key(0x4d238,0x1,0x79868,0x0,0xffffffff,0x1b) + a0
_ins_anytime(0x0,0x0,0x1,0xf7ffe75c,0x1,0x1b) + 1bc
_ins_n_times(0x0,0x1,0x1,0x0,0x0,0x1) + 48
_insert(0x0,0x1,0x46400,0x1,0x1,0x0) + c
_execute(0x42f60,0x0,0x1,0x0,0x0,0x3) + 158
_loop(0x1,0x83bd0,0x80,0x1,0x0,0x42f60) + 164
_main(0x1,0x4d238,0x1,0x0,0x41408,0x0) + 9f8

0x89d88,8/X
0x89d88:        89e20           1               1               dfdfdfe0
                1b              dfdfdfdf        dfdfdfdf        20094120

0x89e20,8/X		# fishy looking data
0x89e20:        6adfdfdf        dfdfdfdf        18              dfdfdfdf
                dfdfdfdf        dfdfdfdf        dfdfdfdf        6865206c

-----------------------------------------------------

the double beep for aborted searches is really annoying
-----------------------------------------------------


- When using find by repeatedly using n or b give a message like "all
  occurrences of pattern found" when I have scanned through the whole
  file. This as an extension of the "only one occurence of pattern"
  message.
---------------------------
- I use you example of the ^X-m macro given in the help file to
  read a manual page for some identifier. It would be nice to have a
  shell-command that would NOT wait for me to press return or escape.

---------------------------

- The wrapmargin option is badly broken. If I set wm=40 and
  type the preceding sentences from the beginning of the line 
  I get:
Thewrapmarginoptionisbadlybroken.If






 I set ....

 So it joins all the words in the 1st line, gives me some empty lines,
and continues. The :ww option seems to work fine, strangely enough.

---------------------------


It looks like vile is not eight-bit clean. I was trying
to edit some Japanese text and vile is stripping off the
top bit if the characters.

---------------------------

[ this may be fixed...  ]

    1. Why does :e # default to the current file(buffer) rather than the
    previously visited buffer?

    2. Why, when I use my arrow keys to go back into the :e # history, do
    I see two copys of the current file(buffer) name rather than just one?

[ and... ]

    something I keep hitting that I would love to see change is that I will
    type :e and then hit the up arrow before remembering to hit the #. 
    This causes the :e to abort and then in my case causes insert mode to
    kick in (the escape from the arrow key perhaps is getting dropped or
    something).

    Could either that escape not be dropped or even better the up arrow be
    treated just like it is in :e# mode?

[ and... ]

    Sigh - I am seeing about 25% or more of the time that when I use :e #
    and the up arrow key (and sometimes just by typing!!!) that the file
    name selected fails as not being found.  Yet trying again, immediately,
    I a) find one less copy of the current buffer in the history buffer and
    b) find the file without a change in the string.

    I am using SunOS 4.1.2 and a SPARC 1 and the latest (10/13 or so) version
    of vile.

---------------------------


With vim 1.27 you can configure its behaviour regarding backspace using
the 'backspace' variable. From the help file:

backspace (bs)	    number    0     0 standard Vi, 1 delete NL, 2 delete all

---------------------------

I was using xvile and it crashed and deleted my file.  It never saved one
in /tmp.  I have the core for it also.

Here are the details:

Operating Version: SunOS nutmeg 4.1.2 1 sun4c
compiled with gcc -g

The error happened in the function

putc(d,ffp);

inside the function

ffputc

in file fileio.c line 556

d had the value of '/'

and ffp was corrupt

it was pointing to the wrong place.

I was just thinking when most of the error's occur and that is when
somebody does a :w

Could it have something to do with opening a file or appending?

I had a quick lok at the code but I was lost in all the defins for ffopen.


---------------------------

	When you do a :b you should have line completion for the name.

---------------------------

We are running vile version 3.61 under NeXT and we have problems with
the redraw. I mean, when I press ^F or ^b (next-page or previous-page)
I get some spurious charactersa in the screen. With a ^L all is back
to the normally. The some is goiing on when I perform a search.

---------------------------

I attempted to compile vile 3.62 with MSVC++1.0 and it did compile fine
although bunch of warnings showed up.  The only file which spit out errors
was ibmpc.c.  Until this file is fixed, there should be no problem compiling
it with MSVC++.  I'm currently using 3.59 and it has a few problems that
sort of borther me:
	*Once in a while the screen scrambles up (broken text) and I can't
	 read anything.
	*Some of the regular expressions hang vile.

---------------------------

[ i think i'd rather embed this stuff in estruct.h, or use separate
	targets....  -pgf ]

for building on NetBSD and FreeBSD:

1. display.c
line 343, added "|| __NetBSD__ || __386BSD__" at the end of line

2. proto.h
line 1234: added "#if !defined(__NetBSD__) && !defined(__386BSD__)"
line 1261: inserted "#endif /* !__NetBSD__ && !__386BSD__ */"

3. termio.c
line 315, added "|| __NetBSD__ || __386BSD__" at the end of line

4. In the makefile, change the CFLAGS to include "-Xlinker -Z" to
pass the -Z flag to the linker (this is compiling under NetBSD for
an executable that will run on NetBSD and FreeBSD). If compiling
under FreeBSD, no such flags are necessary.

Again, the bsd386 makefile target was used for both systems, as
it wasn't a big enough deal to make a new target.

---------------------------

While using XVile with some selected text and moving elsewhere to paste
that text, cursor disappeared and window soon followed, with:

Program terminated with signal 11, Segmentation fault.
No debugging symbols found
No debugging symbols found
#0  0xeac8 in bsizes ()
pdm 1 -> where
#0  0xeac8 in bsizes ()
#1  0x1a974 in writeout ()
#2  0x1b4f0 in imdying ()
#3  0xf76b2c54 in _sigtramp ()
#4  0x114bc in col2offs ()
#5  0xa5bc in setwmark ()
#6  0xa6a8 in setcursor ()
#7  0x73c8 in x_putline ()
#8  0x79e4 in x_putline ()
#9  0x7bf8 in x_working ()
#10 0x1fc2c in tgetc ()
#11 0x1fcec in kbd_key ()
#12 0x220d4 in replacechar ()
#13 0x224b8 in ins ()
#14 0x21ae8 in opendown ()
#15 0x16910 in execute ()
#16 0x2e50 in loop ()
#17 0x2cdc in main ()

XVILE 3.62 on a SPARC SunOS 4.1.1.


---------------------------

Want to hang vile? Just type
:../
Only kill seems to get you unstuck.

Maybe you can pass this on to the vile author(s).

It's vile version 3.62 under SunOS 4.1.3
---------------------------
	Here are stack traces from five core dumps :-( I've gotten from
xvile 3.62.  I don't think I've seen any from plain old vile, but then I
don't use it nearly as much.

	No rush on any of these; I've sort of learned to live with the
instability.  I just wanted to get these in the mail before they disappear
off the bottom of my stack....  Let me know if there are additional bits
of information you'd like when I report core dumps in the future.

	Another sad thing is that a Purify-ed xvile runs so slowly that I
don't do it very often.

	On a lighter note, I've been thinking about :abbr for vile.  Do
you know of anyone working on it.  If not, I may play around with it.

	Eric Krohn


core dump from xvile 3.62 on SunOS 4.1.1

$C
_kill(?)
__DYNAMIC(0x0,0x21,0x1,0x8,0x0,0xf771f018) + 8
_imdying(0xb,0x3,0xf7ffda98,0x0,0x0,0x0) + 198
__sigtramp(?)
_tb_get(0x79e50,0xdfdfdfdf,0x41000,0x5,0xf8401000,0x1b) + ac
_tb_next(0x83120,0xdfdfdfdf,0x1,0x45fa9,0x2ab7,0x45fac) + 20
_x_getc(0x0,0x1,0x45f38,0x28,0xffffffff,0x48400) + 20
_tgetc(0x0,0x0,0x1,0x0,0x0,0x10) + ac
_kbd_key(0x4,0x0,0x7b530,0x0,0x0,0x4) + 4
_ins_anytime(0x0,0x1,0x1,0xf7ffe5ac,0x1,0x1b) + 1bc
_ins(0x0,0x1,0x1b,0xffffffff,0x41000,0x1) + 10
_chgreg(0x1,0x0,0x1,0x9,0x0,0x1) + 54
_operator(0x0,0x42c00,0x2941c,0x42ea0,0x0,0x4d2f0) + 210
_operchg(0x0,0x1,0x46400,0x2,0x2,0x42db0) + 24
_execute(0x430a8,0x0,0x1,0x0,0x0,0x83) + 158
_loop(0x1,0x0,0x80,0x1,0x0,0x430a8) + 164
_main(0x1,0x4d2f0,0x1,0x0,0x4141b,0x0) + a44

0x83120,4/X
0x83120:        79e50           8               5               dfdfdfe0
0x79e50,4/X
0x79e50:        651b6565        65dfdfdf        18              0

xvile 3.62 again (Sun4)
core file = core -- program ``xvile3.62''
SIGBUS 10: bus error
$C
_bsizes() + 34
_writeout(0xf7ffdac8,0x4d2f0,0x0,0x1,0x48790,0x45c5a) + 4
_imdying(0xa,0x2,0xf7ffdd18,0x1,0x0,0x4d2f0) + c4
__sigtramp(?)
_bsizes(0x4d2f0,0xa,0x4d508,0xbde,0x5f,0x1) + ac
_line_count(0x4d2f0,0x88,0x86aa0,0x7b,0x0,0x0) + 4
_line_report(0xea,0x1b,0x7a6c5,0x7a688,0x86800,0x1) + 8
_put(0xffffffff,0x1,0x1,0x7b218,0x1,0x0) + 1e0
_doput(0x1,0x1,0x0,0x0,0x0,0x1) + 150
_putbefore(0x0,0x1,0x46400,0x2,0x2,0x42db0) + 10
_execute(0x431b0,0x0,0x1,0x0,0x0,0x3) + 158
_loop(0x1,0x4d508,0x80,0x1,0x0,0x431b0) + 164
_main(0x1,0x4d2f0,0x1,0x0,0x4141b,0x0) + a44
0x4d2f0,4/X
_end+0x2cc0:    4d508           0               7b978           0


core dump in xvile 3.62 on Pyramid SVR3.


$C
_kill(6690,6,0,C00CD508,C00CD50C,C00CD510,E000000,0,C00CD51C,C00CD520,C00CD524,C00CD528) from 53658
_abort(0,200350,7BE64,5B2F4,0,0,1,C00CD454,C00CD49C,C00CD4A0,C00CD4A4,C00CD4A8) from 4a4e0
_imdying(A,1,C00CD454,200350,1BF8C,C00CD400,6EBDC,21,C00CD41C,C00CD420,C00CD424,FF1962EC) from 1c17c
?(6EF4C,6EF4C,1,6EF4C,77,20,1,B9440,0,17C,F3010800,FF1962EC) from c00cc000
_add_line_at(BFB80,CD31C,70318,1,20,80,AE48,21,C00CD31C,C00CD320,C00CD324,C00CD328) from d414
_addline(BFB80,70318,1,C00CD2F4,9EA58,10,7099C,0,C00CD29C,C00CD2A0,C00CD2A4,C00CD2A8) from d274
_hst_flush(1,1,1,154,0,1,0,3A,3C,C00CD220,C00CD224,FF1962EC) from 1fa08
_namedcmd(1,1,16274,B9440,0,9,0,6,C00CD19C,C00CD1A0,C00CD1A4,FF1962EC) from 1629c
_execute(58030,0,1,C00CD108,C00CD10C,C00CD110,0,B9440,C00CD11C,C00CD120,C00CD124,C00CD128) from 16b48
_loop(1,0,B,20,0,C00CD080,0,0,0,0,0,0) from ca8
_main(6,C00CB428,C00CB444) from b44


0xBFB80,40/X
BFB80:          7099c           0               0               0
1               6132c           1               61334
1               6133c           100             61344
1               6134c           8               61354
8               6135c           0               61364
0               bfbd0           6da80           61374
0               bfbe0           4a              61384
0               6138c           1               61394
1               bfc00           943dc           613a4
6da74           613ac           6da98           613b4
8               613bc           0               613c4
1               613cc           1               613d4
8               bfc40           0               613e4
0               613ec           6da5c           613f4
0               613fc           a               61404
1               bfc70           0               61414


0x70318/s
70318:          w! trimoutputpenamen (""); }/

0xCD31C,4/X
CD31C:          cd31c           cd31c           10              0
		This LINEPTR looks fishy.


This was followed soon by a core dump in xvile 3.62 on SunOS 4.1.1!

$C
_kill(?)
__DYNAMIC(0x0,0x21,0x1,0x0,0x0,0xf771f018) + 8
_imdying(0xb,0x4,0xf7ffe118,0x0,0x0,0x0) + 198
__sigtramp(?)
_x_putline(0x41000,0x10,0xd0022064,0x50,0x0,0x0) + ac
		^ These arguments look wildly wrong.
_updateline(0x0,0x0,0x50,0x32f84,0x6306c,0x32f84) + f4
_updupd(0x0,0x48800,0x8edb4,0x23,0x0,0x0) + a4
_update(0x0,0x0,0x1,0x0,0x10,0x0) + 34c
_loop(0x1,0x80150,0x80,0x0,0x42ec0,0x42ec0) + d8
_main(0x1,0x4d2e0,0x1,0x0,0x4141b,0x0) + a44



core dump in xvile 3.62 on Pyramid SVR3.  I was typing a s,^, and I was trying
select and paste text for the replacement string.


$C
_kill(2445,6,0,34,FFFFFFFF,FFFFFFFF,E000000,0,0,0,0,FF1962EC) from 53658
_abort(0,200361,34,0,0,0,1,C00CDAD4,C00CD31C,C00CD320,C00CD324,FF1962EC) from 4a4e0
_imdying(A,1,C00CDAD4,200361,1BF8C,C00CDA80,14,D,C00CD29C,C00CD2A0,C00CD2A4,FF1962EC) from 1c17c
?(7CB80,72656475,0,64,E,1,70728,72656475,C00CD21C,C00CD220,C00CD224,FF1962EC) from c00cc000
_malloc(10,0,0,6EF10,1,F,0,1,C00CD1AC,C00CB000,C00CB004,C00CB008) from 536e0
_strndup(6EF10,E,20,D2,2D0,8,9ED70,9EA74,C00CA85C,C00CD928,C00CD980,FF1962EC) from 2498
_x_paste_selection(70728,0,FFFFFFFE,4,0,1,2,70728,C00CA85C,0,0,0) from 5074
_x_process_event(C00CAFA0,C00CAFA0,0,D2,2DF,9E966,5B922,0,7D3DC,0,0,0) from 63c8
_x_getc(0,0,6868,8,15,1,0,6414,7D3C8,C00CD7A0,C00CD7A4,C00CD7A8) from 64b0
_tgetc(0,C00CD700,C00CD704,C00CD708,C00CD70C,C00CD710,C00CD714,3BD8,C00CD71C,C00CD720,C00CD724,C00CD728) from 20ad0
_kbd_key(0,61168,80,2C,0,0,0,CC118,0,1B5B58,0,FF1962EC) from 20b54
_kbd_reply(5C18C,61168,80,21658,2C,0,202A4,0,0,C00CD628,39DF,FF1962EC) from 2195c
_kbd_string(5C18C,61168,80,2C,0,202A4,7D3C8,9EF7C,0,118,C00CD5A4,FF1962EC) from 21724
_readpattern(5C18C,61168,0,2C,0,1,0,CC11C,C00CD51C,C00CD520,C00CD524,C00CD528) from 31330
_substreg1(1,1,8B2C,1,8,1,70728,3BD8,C00CD49C,C00CD4A0,C00CD4A4,FF1962EC) from 29abc
_substregion(1,610A4,1,C00CB1B8,8,1,0,6128C,1,C00CD380,C00CD424,FF1962EC) from 298b8
_operator(0,1,298A8,5C484,73,20,C00CB0C0,0,0,0,0,FF1962EC) from 2a970
_opersubst(0,1,2AEBC,CA560,20,80,AE48,580E0,C00CD31C,C00CD320,C00CD324,C00CD328) from 2aeec
_execute(580E0,0,1,C00CD2F4,9EA58,2,0,9EA60,C00CD29C,C00CD2A0,C00CD2A4,C00CD2A8) from 16b48
_execute_named_command(0,1,0,2D0,0,1,0,70728,C00CD21C,C00CD220,C00CD224,FF1962EC) from 16204
_namedcmd(0,1,16274,8,B60,C00CD180,0,6,C00CD19C,C00CD1A0,C00CD1A4,FF1962EC) from 16290
_execute(58030,0,1,C00CD108,C00CD10C,C00CD110,9,CA560,C00CD11C,C00CD120,C00CD124,C00CD128) from 16b48
_loop(1,0,B,20,0,C00CD080,0,0,0,0,0,0) from ca8
_main(6,C00CB428,C00CB444) from b44

0x6EF10/s
6EF10:                  s/^Rules never reduced:$/
						 $&/;
This looks like the previous pattern I have used.  It was certainly not what
I had just selected.

---------------------------

Hi, we are running vile under NeXT. We have the following three problems:

I've tried only to delete a char using `x'...

\def\impldby{\raise 2pt\hbox{$
            {\scriptstyle\sim\hspace*{-memory allocation error: attempt to free 
or realloc space not in heap
\def\impls{\raise 2pt\hbox{$bad zone
          {\scriptstyle<\hspace*{-1.IOT trap\hspace*{-1mm}\sim\hspace*{-1mm}\si>
}                

Also we have problems when we accidentally press ^J.  Vile is hanging
in this situation.


We still have problems with the automatic  redraw.

---------------------------

boggs% gdb /usr/local/bin/xvile core
GDB is free software and you are welcome to distribute copies of it
 under certain conditions; type "show copying" to see the conditions.
There is absolutely no warranty for GDB; type "show warranty" for details.
GDB 4.10.pl1 (sparc-sun-sunos4.1.1), 
Copyright 1993 Free Software Foundation, Inc...(no debugging symbols found)...
Core was generated by `xvile'.
Program terminated with signal 6, Abort.
Reading symbols from /usr/lib/libX11.so.4.10...(no debugging symbols found)...
done.
Reading symbols from /usr/lib/libc.so.1.6...(no debugging symbols found)...
done.
#0  0xf76dc120 in kill ()
(gdb) where
#0  0xf76dc120 in kill ()
#1  0xf76f447c in abort ()
#2  0x1b5c4 in imdying ()
#3  0xf76b2c54 in _sigtramp ()
#4  0x30c28 in tb_put ()
#5  0x30c9c in tb_append ()
#6  0x6544 in add2paste ()
#7  0x67a8 in copy_paste ()
#8  0x6878 in x_get_selection ()
#9  0x6914 in x_paste_selection ()
#10 0x7a2c in x_process_event ()
#11 0x7bf8 in x_getc ()
#12 0x1fc2c in tgetc ()
#13 0x1fcec in kbd_key ()
#14 0x220d4 in ins_anytime ()
#15 0x21904 in ins_n_times ()
#16 0x21b94 in insert ()
#17 0x16910 in execute ()
#18 0x2e50 in loop ()
#19 0x2cdc in main ()
(gdb) 

This occurred when I had selected a word to paste and then hit MB2 without
moving, still inside the selection area, not in insert mode. I hadn't realized
the cursor moved with the selection and so was pasting into the wrong
area in the wrong mode.

I wasn't able to reproduce this, and a quick check of the code doesn't
show anything obviously wrong to cause the exception. 

---------------------------

I was wondering if it was possible
to delete/cut the highlighted region (from the selection with mouse button
one)? 
